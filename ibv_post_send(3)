int ibv_post_send(struct ibv_qp *qp, struct ibv_send_wr *wr,
                  struct ibv_send_wr **bad_wr);

ibv_post_send（）将以wr开头的工作请求（WR）的链接列表发布到队列对qp的发送队列中。 它在第一次失败时停止处理此列表中的WR（可以在发布请求时立即检测到），并通过bad_wr返回此失败的WR。

参数wr是<infiniband/verbs.h>中定义的ibv_send_wr结构。

struct ibv_send_wr {
        uint64_t                wr_id;                  /* 用户定义的WR ID */
        struct ibv_send_wr     *next;                   /* 指向列表中下一个WR的指针，如果最后一个WR则为NULL */
        struct ibv_sge         *sg_list;                /* 指向s/g数组的指针 */
        int                     num_sge;                /* s/g数组大小 */
        enum ibv_wr_opcode      opcode;                 /* 操作类型 */
        int                     send_flags;             /* WR属性的标志 */
        uint32_t                imm_data;               /* 临时数据（以网络字节顺序） */
        union {
                struct {
                        uint64_t        remote_addr;    /* 远程存储器缓冲区的起始地址 */
                        uint32_t        rkey;           /* 远程存储区的键 */
                } rdma;
                struct {
                        uint64_t        remote_addr;    /* 远程存储器缓冲区的起始地址 */
                        uint64_t        compare_add;    /* 比较操作数 */
                        uint64_t        swap;           /* 交换操作数 */
                        uint32_t        rkey;           /* 远程存储区的键 */
                } atomic;
                struct {
                        struct ibv_ah  *ah;             /* 远程节点地址的地址句柄（AH） */
                        uint32_t        remote_qpn;     /* 目的地QP的QP号 */
                        uint32_t        remote_qkey;    /* 目标QP的Q_Key号 */
                } ud;
        } wr;
};

struct ibv_sge {
        uint64_t                addr;                   /* 本地内存缓冲区的起始地址 */
        uint32_t                length;                 /* 缓冲区长度 */
        uint32_t                lkey;                   /* 本地存储区的密钥 */
};

每种QP传输服务类型都支持一组特定的操作码，如下表所示：

OPCODE                      | IBV_QPT_UD | IBV_QPT_UC | IBV_QPT_RC
----------------------------+------------+------------+-----------
IBV_WR_SEND                 |     X      |     X      |     X
IBV_WR_SEND_WITH_IMM        |     X      |     X      |     X
IBV_WR_RDMA_WRITE           |            |     X      |     X
IBV_WR_RDMA_WRITE_WITH_IMM  |            |     X      |     X
IBV_WR_RDMA_READ            |            |            |     X
IBV_WR_ATOMIC_CMP_AND_SWP   |            |            |     X
IBV_WR_ATOMIC_FETCH_AND_ADD |            |            |     X

属性send_flags描述WR的属性。 它是0或以下一个或多个标志的按位或：
IBV_SEND_FENCE设置围栏指示器。 仅对运输服务类型为IBV_QPT_RC的QP有效
IBV_SEND_SIGNALED设置完成通知指示器。 仅当使用sq_sig_all = 0创建QP时相关
IBV_SEND_SOLICITED设置请求的事件指示器。 仅对立即发送和RDMA写有效
IBV_SEND_INLINE将给定收集列表中的数据作为内联数据发送
在发送WQE中。 仅对发送和RDMA写有效。 L_Key将不会被检查。

返回值
ibv_post_send（）成功返回0，失败则返回errno的值（指示失败原因）。

笔记
在完全执行请求并从相应的完成队列（CQ）中检索到工作完成之前，用户不得更改或销毁与WR相关的AH，以避免意外行为。
WR使用的缓冲区只有在WR完全执行了请求并且已经从相应的完成队列（CQ）中检索到工作完成之后，才能安全地重用。 但是，如果设置了IBV_SEND_INLINE标志，则在调用返回后可以立即重用该缓冲区。
